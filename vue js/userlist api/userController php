<?php
namespace App\Http\Controllers;
use App\User;
use App\Mail\Welcome;
use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use Hash;
use App\Http\Resources\UserResource;
use App\Http\Resources\UserResourceCollection;



class UserController extends Controller



{
    public function postSignUp(Request $request)
    {
        $this->validate($request, [
            'email' => 'required|email|unique:users',
            'first_name' => 'required|max:120',
            'password' => 'required|min:4'
        ]);
        $email = $request['email'];
        $first_name = $request['first_name'];
        $password = bcrypt($request['password']);

        //create the user
        $user = new User();
        $user->email = $email;
        $user->first_name = $first_name;
        $user->password = $password;
        $user->save();

        //sign them in
        Auth::login($user);
        //redirect to the home page
        
        return redirect()->route('home');
    }

  public function getSignin()
    {
        
        return view('user.signin');
    }

    public function postSignin(Request $request)
     {  
     $this->validate($request, [
        'email' => 'email|required',
        'password' => 'required|min:4|confirmed'
    ]);
    if (Auth::attempt(['email' => $request->input('email'), 'password' => bcrypt($request->input('password'))])) {
        return redirect()->route('user.profile');
    }
    return redirect()->back();
}
    
        public function getLogout()
    {
        Auth::logout();
        return redirect()->route('home');
    }

    // user account

    public function getAccount()
    {
        return view('account', ['user' => Auth::user()]);
    }

    public function postSaveAccount(Request $request)
    {
        $this->validate($request, [
           'first_name' => 'required|max:120'
        ]);
        $user = Auth::user();
        $old_name = $user->first_name;
        $user->first_name = $request['first_name'];
        $user->update();
        $file = $request->file('image');
        $filename = $request['first_name'] . '-' . $user->id . '.jpg';
        $old_filename = $old_name . '-' . $user->id . '.jpg';
        $update = false;
        if (Storage::disk('local')->has($old_filename)) {
            $old_file = Storage::disk('local')->get($old_filename);
            Storage::disk('local')->put($filename, $old_file);
            $update = true;
        }
        if ($file) {
            Storage::disk('local')->put($filename, File::get($file));
        }
        if ($update && $old_filename !== $filename) {
            Storage::delete($old_filename);
        }
        return redirect()->route('account');
    }

    public function getUserImage($filename)
    {
        $file = Storage::disk('local')->get($filename);
        return new Response($file, 200);
    }

    
  


//API  - functions - show, index, store (create), update, destroy = for index, get, post, put and delete endpoints, to show users in an api by id @param user and returning user resource

    public function show(User $user): UserResource
    {
        return new UserResource ($user);
    }

 public function index(): UserResourceCollection
    {
        return new UserResourceCollection(User::orderBy('created_at', 'desc')->paginate(5));
    }


 public function store(Request $Request)
    {
        $request->validate([
            'first_name' => 'required',
            'last_name' => 'required',
            'email' => 'required',
        ]);

        $user = User::create($request->all());

        \Mail::to($user)->send(new Welcome);
        return new UserResourse($user);
    }


public function update(User $user, Request $request): UserResource
    {
        $user->update($request->all());
        return new UserResource($User);
    }

public function destroy(User $user)
    {
        $user->delete();
        return response()->json();
    }

}



